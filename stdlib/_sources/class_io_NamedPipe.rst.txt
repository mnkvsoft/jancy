.. include:: def.rst
.. index:: pair: class; io.NamedPipe
.. _doxid-type_io_namedpipe:
.. _cid-io.namedpipe:

class io.NamedPipe
==================

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "io_base.jncx"
	import "io_NamedPipe.jnc"


Overview
~~~~~~~~

This class provides high-level asynchronous interface for the
*server* side of Windows named pipes. Windows named pipes are widely
used for IPC (Inter-Process Communications) between applications,
services and drivers on Windows platform. :ref:`More...<details-doxid-type_io_namedpipe>`

.. _doxid-struct_member_io_namedpipe_iface_m_activeevents:
.. _cid-io.namedpipe.m_activeevents:
.. _doxid-struct_member_io_namedpipe_iface_m_ioerror:
.. _cid-io.namedpipe.m_ioerror:
.. _doxid-property_io_namedpipe_m_backloglimit:
.. _cid-io.namedpipe.m_backloglimit:
.. _doxid-property_io_namedpipe_m_readparallelism:
.. _cid-io.namedpipe.m_readparallelism:
.. _doxid-property_io_namedpipe_m_readblocksize:
.. _cid-io.namedpipe.m_readblocksize:
.. _doxid-property_io_namedpipe_m_readbuffersize:
.. _cid-io.namedpipe.m_readbuffersize:
.. _doxid-property_io_namedpipe_m_writebuffersize:
.. _cid-io.namedpipe.m_writebuffersize:
.. _doxid-property_io_namedpipe_m_options:
.. _cid-io.namedpipe.m_options:
.. _doxid-function_io_namedpipe_wait:
.. _cid-io.namedpipe.wait:
.. _doxid-function_io_namedpipe_cancelwait:
.. _cid-io.namedpipe.cancelwait:
.. _doxid-function_io_namedpipe_blockingwait:
.. _cid-io.namedpipe.blockingwait:
.. ref-code-block:: jancy
	:class: overview-code-block

	// fields

	:ref:`io.NamedPipeEvents<doxid-type_io_namedpipeevents>` readonly volatile m_activeEvents
	:ref:`std.Error<doxid-type_std_error>` const* readonly volatile m_ioError
	bool readonly :ref:`m_isOpen<doxid-struct_member_io_namedpipe_iface_m_isopen>`

	// properties

	:ref:`uint_t<doxid-typedef_uint_t>` autoget property m_backLogLimit 
	:ref:`uint_t<doxid-typedef_uint_t>` autoget property m_readParallelism 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBlockSize 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBufferSize 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_writeBufferSize 
	:ref:`io.FileStreamOptions<doxid-type_io_filestreamoptions>` autoget property m_options 

	// methods

	bool errorcode :ref:`open<doxid-function_io_namedpipe_open>` (char const* name)
	void :ref:`close<doxid-function_io_namedpipe_close>` ()
	:ref:`io.FileStream<doxid-type_io_filestream>`* :ref:`accept<doxid-function_io_namedpipe_accept>` ()

	long errorcode wait (
	    :ref:`io.NamedPipeEvents<doxid-type_io_namedpipeevents>` eventMask,
	    void function* handler (io.NamedPipeEvents triggeredEvents)
	    )

	bool errorcode cancelWait (long handle)

	:ref:`io.NamedPipeEvents<doxid-type_io_namedpipeevents>` errorcode blockingWait (
	    :ref:`io.NamedPipeEvents<doxid-type_io_namedpipeevents>` eventMask,
	    :ref:`uint_t<doxid-typedef_uint_t>` timeout
	    )

	// aliases

	alias :ref:`dispose<doxid-alias_io_namedpipe_dispose>` = close

.. _details-doxid-type_io_namedpipe:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides high-level asynchronous interface for the
*server* side of Windows named pipes. Windows named pipes are widely
used for IPC (Inter-Process Communications) between applications,
services and drivers on Windows platform.

For working from the *client* side of a named pipe, please use `io.File`
class.

A typical sequence of steps when working with a named pipe server looks
something like this:

* Open a server-side named pipe with ``open`` method;
* Assign IO event handler with ``wait`` method. You would probably also
  want to *schedule* your event handler to be run in particular
  environment (e.g., in a specific thread) and partially apply some
  syncrhonization ID to discard late events;
* When `io.NamedPipeEvents.IncomingConnection` event is fired, accept a
  client connection using ``accept`` method;
* Communicate with the client via `io.FileStream` returned by ``accept``;
* Close named pipe server and accepted client file streams when no longer
  needed with ``close`` method.



.. rubric:: See also:

`io.NamedPipeEvents`, `io.File`, `io.FileStream`

Fields
------

.. _doxid-struct_member_io_namedpipe_iface_m_isopen:
.. _cid-io.namedpipe.m_isopen:
.. ref-code-block:: jancy
	:class: title-code-block

	bool readonly m_isOpen

Holds the open status for serial port, i.e. ``true`` if opened;
``false`` otherwise.

Methods
-------

.. _doxid-function_io_namedpipe_open:
.. _cid-io.namedpipe.open:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (char const* name)

Opens server-side named pipe(s), effectively starting a named pipe
server.

The function accepts three arguments. The first one, ``name``, is used
to specify the name of the server-side named pipe. The second one,
``flags``, allows you to set  The last and final one, ``backlog``,
specifies the size of the server backlog. Server backlog is defined as
the maximum length of the queue of *pending* client-side connections,
i.e. connections which has not been accepted via ``accept`` method yet.

Returns ``true`` on success. If the named pipe server could not be
opened, IO error supplied by operating system is set and then the
function returns ``false`` [#f1]_.

.. _doxid-function_io_namedpipe_close:
.. _cid-io.namedpipe.close:
.. ref-code-block:: jancy
	:class: title-code-block

	void close ()

Closes all previously opened server-side named pipes in the backlog;
does nothing if the named pipe server is not started. This function
always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``close`` [#f2]_.

.. _doxid-function_io_namedpipe_accept:
.. _cid-io.namedpipe.accept:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`io.FileStream<doxid-type_io_filestream>`* accept ()

Accepts a client connection and returns a resulting `io.FileStream`
object to communicate with this particular client. To terminate a
client connection, issue ``close`` method on the client file stream
object.

If method fails, ``null`` value is returned [#f1]_.

Aliases
-------

.. _doxid-alias_io_namedpipe_dispose:
.. _cid-io.namedpipe.dispose:
.. ref-code-block:: jancy
	:class: title-code-block

	alias dispose = close

Effectively makes ``io.NamedPipe`` a *disposable* class [#f2]_.

---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

.. [#f3]

	|footnote-sync-id|

