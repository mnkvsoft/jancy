.. include:: def.rst
.. index:: pair: class; io.Socket
.. _doxid-type_io_socket:
.. _cid-io.socket:

class io.Socket
===============

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "io_base.jncx"
	import "io_Socket.jnc"


Overview
~~~~~~~~

This class provides high-level asynchronous interface for accessing
all kinds of sockets. :ref:`More...<details-doxid-type_io_socket>`

.. _doxid-struct_member_io_socket_iface_m_activeevents:
.. _cid-io.socket.m_activeevents:
.. _doxid-struct_member_io_socket_iface_m_ioerror:
.. _cid-io.socket.m_ioerror:
.. _doxid-property_io_socket_m_readparallelism:
.. _cid-io.socket.m_readparallelism:
.. _doxid-property_io_socket_m_readblocksize:
.. _cid-io.socket.m_readblocksize:
.. _doxid-property_io_socket_m_readbuffersize:
.. _cid-io.socket.m_readbuffersize:
.. _doxid-property_io_socket_m_writebuffersize:
.. _cid-io.socket.m_writebuffersize:
.. _doxid-property_io_socket_m_options:
.. _cid-io.socket.m_options:
.. _doxid-function_io_socket_wait:
.. _cid-io.socket.wait:
.. _doxid-function_io_socket_cancelwait:
.. _cid-io.socket.cancelwait:
.. _doxid-function_io_socket_blockingwait:
.. _cid-io.socket.blockingwait:
.. ref-code-block:: jancy
	:class: overview-code-block

	// fields

	:ref:`io.SocketEvents<doxid-type_io_socketevents>` readonly volatile m_activeEvents
	:ref:`std.Error<doxid-type_std_error>` const* readonly volatile m_ioError
	bool readonly :ref:`m_isOpen<doxid-struct_member_io_socket_iface_m_isopen>`

	// properties

	:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const property :ref:`m_address<doxid-property_io_socket_m_address>` 
	:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const property :ref:`m_peerAddress<doxid-property_io_socket_m_peeraddress>` 
	:ref:`uint_t<doxid-typedef_uint_t>` autoget property m_readParallelism 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBlockSize 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBufferSize 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_writeBufferSize 
	:ref:`io.SocketOptions<doxid-type_io_socketoptions>` autoget property m_options 

	// methods

	bool errorcode :ref:`open<doxid-function_io_socket_open>` (
	    :ref:`io.AddressFamily<doxid-type_io_addressfamily>` family,
	    :ref:`io.Protocol<doxid-type_io_protocol>` protocol
	    )

	bool errorcode :ref:`open<doxid-function_io_socket_open_2>` (
	    :ref:`io.Protocol<doxid-type_io_protocol>` protocol,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address
	    )

	bool errorcode :ref:`open<doxid-function_io_socket_open_3>` (:ref:`io.Protocol<doxid-type_io_protocol>` protocol)
	void :ref:`close<doxid-function_io_socket_close>` ()
	bool errorcode :ref:`connect<doxid-function_io_socket_connect>` (:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address)
	bool errorcode :ref:`listen<doxid-function_io_socket_listen>` (:ref:`size_t<doxid-typedef_size_t>` backlog = 0)
	:ref:`io.Socket<doxid-type_io_socket>`* errorcode :ref:`accept<doxid-function_io_socket_accept>` (:ref:`io.SocketAddress<doxid-type_io_socketaddress>`* address = null)

	:ref:`size_t<doxid-typedef_size_t>` errorcode :ref:`read<doxid-function_io_socket_read>` (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

	:ref:`size_t<doxid-typedef_size_t>` errorcode :ref:`write<doxid-function_io_socket_write>` (
	    void const* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

	:ref:`size_t<doxid-typedef_size_t>` errorcode :ref:`readDatagram<doxid-function_io_socket_readdatagram>` (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>`* address
	    )

	:ref:`size_t<doxid-typedef_size_t>` errorcode :ref:`writeDatagram<doxid-function_io_socket_writedatagram>` (
	    void const* p,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address
	    )

	long errorcode wait (
	    :ref:`io.SocketEvents<doxid-type_io_socketevents>` eventMask,
	    void function* handler (io.SocketEvents triggeredEvents)
	    )

	bool errorcode cancelWait (long handle)

	:ref:`io.SocketEvents<doxid-type_io_socketevents>` errorcode blockingWait (
	    :ref:`io.SocketEvents<doxid-type_io_socketevents>` eventMask,
	    :ref:`uint_t<doxid-typedef_uint_t>` timeout
	    )

	// aliases

	alias :ref:`dispose<doxid-alias_io_socket_dispose>` = close

.. _details-doxid-type_io_socket:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides high-level asynchronous interface for accessing
all kinds of sockets.

Sockets represent endpoints of network communications. Sockets are
subdivided into two large subclassess: **datagram-oriented** and
**connection-oriented**. Furthermore, connection-riented sockets can operate
in one of the two modes: **client** and **server**. And even though these
interfaces don't share that many commonalities, it so historically happened
that they are usually blended into a single *socket API*.

Jancy follows this traditional approach.

Sample code (client connection-oriented TCP socket):

.. ref-code-block::

    class MyDialog
    {
        // ...

        io.Socket m_socket;
        uint_t m_syncId;

        connect (char const* addrString);
        close ();
        waitSocketEvents ();

        onWriteButtonClicked ();

        onSocketEvent (
            uint_t syncId,
            `io.SocketEvents` triggeredEvents
            );
    }

    MyDialog.connect (char const* addrString)
    {
        `io.SocketAddress` sockAddr;
        sockAddr.parse (addrString);
        m_socket.open (`io.Protocol.Tcp`);
        m_socket.connect (sockAddr);
        waitSocketEvents ();

    catch:
        // handle the error...
    }

    MyDialog.close ()
    {
        m_socket.close ();
        m_syncId++; // events past this point will be discarded as 'late'
    }

    MyDialog.waitSocketEvent ()
    {
        `io.SocketEvents` eventMask =
            `io.SocketEvents.IoError` |
            `io.SocketEvents.IncomingData`;

        if (!(m_socket.m_activeEvents & `io.SocketEvents.Connected`))
            eventMask |= `io.SocketEvents.Connected`;

        m_socket.wait (eventMask, onSocketEvent ~(++m_syncId) @
            g_mainThreadScheduler);
    }

    MyDialog.onWriteButtonClicked ()
    {
        static char data [] = "a quick brown fox jumps over the lazy dog";
        m_socket.write (data, sizeof (data));
    }

    MyDialog.onSocketEvent (
        uint_t syncId,
        `io.SocketEvents` triggeredEvents
        )
    {
        if (syncId != m_syncId) // late event
            return;

        if (triggeredEvents & `io.SocketEvents.IoError`)
        {
            char cont* errorString = m_socket.m_ioError.m_description;
            // ...
        }

        if (triggeredEvents & `io.SocketEvents.Connected`)
        {
            // TCP connection established
        }

        if (triggeredEvents & `io.SocketEvents.IncomingData`)
        {
            char buffer [256];
            size_t size = m_socket.read (buffer, sizeof (buffer));
            // ...
        }

        waitSocketEvents (); // restart wait
    }



.. rubric:: See also:

`io.SocketEvents`, `io.SocketAddress`

Fields
------

.. _doxid-struct_member_io_socket_iface_m_isopen:
.. _cid-io.socket.m_isopen:
.. ref-code-block:: jancy
	:class: title-code-block

	bool readonly m_isOpen

Holds the open status for the socket, i.e. ``true`` if opened; ``false``
otherwise.

Properties
----------

.. _doxid-property_io_socket_m_address:
.. _cid-io.socket.m_address:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const property m_address 

This property is used for getting the local address assigned to this
socket. If the address has not been assigned yet, returns empty address.

.. _doxid-property_io_socket_m_peeraddress:
.. _cid-io.socket.m_peeraddress:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const property m_peerAddress 

This property is used for getting the remote address of the peer this
socket is connected to. If the connection has not been established yet,
returns empty address.

Methods
-------

.. _doxid-function_io_socket_open:
.. _cid-io.socket.open:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (
	    :ref:`io.AddressFamily<doxid-type_io_addressfamily>` family,
	    :ref:`io.Protocol<doxid-type_io_protocol>` protocol
	    )

Opens a new unbound socket.

The function accepts three arguments. The first one, ``family``,
specifies the address family of the new socket (``IP4`` vs ``IP6``). The
second argument, ``protocol``, specifies the protocol of the new socket
(datagram-oriented ``UDP`` vs connection-oriented ``TCP``). The third
and final argument, ``flags`` can be used to specify additional open
options.

Returns ``true`` on success. If a new socket could not be opened, IO
error supplied by operating system is set and then the function returns
``false`` [#f1]_.

.. _doxid-function_io_socket_open_2:
.. _cid-io.socket.open-2:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (
	    :ref:`io.Protocol<doxid-type_io_protocol>` protocol,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address
	    )

Opens a new socket and binds it to the specified local address.

The function accepts three arguments. The first one, ``protocol``,
specifies the protocol of the new socket (datagram-oriented ``UDP``
vs connection-oriented ``TCP``). The second argument, ``address``,
specifies the local address to bind the new socket to. The third and
final argument, ``flags`` can be used to specify additional open
options.

Returns ``true`` on success. If a new socket could not be opened, IO
error supplied by operating system is set and then the function returns
``false`` [#f1]_.

.. _doxid-function_io_socket_open_3:
.. _cid-io.socket.open-3:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (:ref:`io.Protocol<doxid-type_io_protocol>` protocol)

Opens a new unbound socket.

The function is equivalent to the very first overload of ``open`` method
with ``family`` argument set to `io.AddressFamily.Ip4`.

.. _doxid-function_io_socket_close:
.. _cid-io.socket.close:
.. ref-code-block:: jancy
	:class: title-code-block

	void close ()

Closes a previously opened socket, does nothing if the file is not
opened. This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``close`` [#f2]_.

.. _doxid-function_io_socket_connect:
.. _cid-io.socket.connect:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode connect (:ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address)

Initiates a connection request to ``address``. This function is only
valid for ``TCP`` sockets.

This method initiates a connection request and returns immediatly.
After connection request completes, an event `io.SocketEvents.Connected`
(on success) or `io.SocketEvents.IoError` (on failure) gets fired.

Returns ``true`` on success. If a connection could not be established,
IO error supplied by operating system is set and then the function
returns ``false`` [#f1]_.

.. _doxid-function_io_socket_listen:
.. _cid-io.socket.listen:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode listen (:ref:`size_t<doxid-typedef_size_t>` backlog = 0)

Places a server socket into ``listen`` state. This function is only
valid for ``TCP`` sockets.

The only argument of the method, ``backlog``, specifies the maximum
length of the queue of *pending* client-side connections, i.e.
connections which has not been accepted via ``accept`` method yet.

Returns ``true`` on success. If the socket could not be placed into
``listen`` state, IO error supplied by operating system is set and then
the function returns ``false`` [#f1]_.

.. _doxid-function_io_socket_accept:
.. _cid-io.socket.accept:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`io.Socket<doxid-type_io_socket>`* errorcode accept (:ref:`io.SocketAddress<doxid-type_io_socketaddress>`* address = null)

Accepts a client connection and returns a resulting ``io.Socket`` object
to communicate with this particular client. To terminate a client
connection, issue ``close`` method on the client file stream object.

The new ``io.Socket`` is created with events disabled. Turn events back
on after assigning an event handler using ``m_isSocketEventEnabled``
property.

If method fails, ``null`` value is returned [#f1]_.

.. _doxid-function_io_socket_read:
.. _cid-io.socket.read:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` errorcode read (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

Attempts to receive up to ``size`` bytes from the socket into the buffer
pointed to by ``p``.

Returns the actual amount of bytes read on success. If read operation is
unsuccessful, IO error supplied by the operating system is set and then
the function returns ``-1`` [#f1]_.

Normally you would call this function from within your event handler for
``IncomingData`` event. If this function is called when there is no
incoming data, it blocks until either the data arrives, or the socket is
closed.

.. _doxid-function_io_socket_write:
.. _cid-io.socket.write:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` errorcode write (
	    void const* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

Attempts to send ``size`` bytes from the buffer pointed to by ``p`` over
the connected socket.

Returns the actual amount of bytes written on success. If write operation
is unsuccessful, IO error supplied by the operating system is set and
then the function returns ``-1`` [#f1]_.

If the return value shows *less* bytes than specified by ``size``
argument, you should suspend further transmission until the file stream
is ready to accept more data. When this happens, ``WriteBufferReady``
event is fired and transmission could be resumed.

.. _doxid-function_io_socket_readdatagram:
.. _cid-io.socket.readdatagram:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` errorcode readDatagram (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>`* address
	    )

Attempts to read up to ``size`` bytes from the socket into the buffer
pointed to by ``p``; stores the address of the sender into the
``address``.

Returns the actual amount of bytes read on success. If read operation is
unsuccessful, IO error supplied by the operating system is set and then
the function returns ``-1`` [#f1]_.

Normally you would call this function from within your event handler for
``IncomingData`` event. If this function is called when there is no
incoming data, it blocks until either the data arrives, or the serial
port is closed.

.. _doxid-function_io_socket_writedatagram:
.. _cid-io.socket.writedatagram:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` errorcode writeDatagram (
	    void const* p,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* address
	    )

Attempts to send ``size`` bytes from the buffer pointed to by ``p`` to
the remote node pointed to by ``address``.

Returns the actual amount of bytes written on success. If write
operation is unsuccessful, IO error supplied by the operating system is
set and then the function returns ``-1`` [#f1]_.

If the return value shows *less* bytes than specified by ``size``
argument, you should suspend further transmission until the file stream
is ready to accept more data. When this happens, ``WriteBufferReady``
event is fired and transmission could be resumed.

Aliases
-------

.. _doxid-alias_io_socket_dispose:
.. _cid-io.socket.dispose:
.. ref-code-block:: jancy
	:class: title-code-block

	alias dispose = close

Effectively makes ``io.Socket`` a *disposable* class [#f2]_.

---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

.. [#f3]

	|footnote-sync-id|

.. [#f4]

	|footnote-set-property-fail|

