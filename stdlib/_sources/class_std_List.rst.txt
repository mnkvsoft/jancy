.. include:: def.rst
.. index:: pair: class; std.List
.. _doxid-type_std_list:
.. _cid-std.list:

class std.List
==============

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "std_List.jnc"


Overview
~~~~~~~~

This class provides a doubly linked list container for ``variant``
values. :ref:`More...<details-doxid-type_std_list>`

.. ref-code-block:: jancy
	:class: overview-code-block

	// fields

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* readonly :ref:`m_head<doxid-struct_member_std_list_iface_m_head>`
	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* readonly :ref:`m_tail<doxid-struct_member_std_list_iface_m_tail>`
	:ref:`size_t<doxid-typedef_size_t>` readonly :ref:`m_count<doxid-struct_member_std_list_iface_m_count>`

	// methods

	void :ref:`clear<doxid-function_std_list_clear>` ()
	void :ref:`takeOver<doxid-function_std_list_takeover>` (:ref:`std.List<doxid-type_std_list>`* list)
	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode :ref:`add<doxid-function_std_list_add>` (variant data)
	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode :ref:`insertHead<doxid-function_std_list_inserthead>` (variant data)
	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode :ref:`insertTail<doxid-function_std_list_inserttail>` (variant data)

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode :ref:`insertBefore<doxid-function_std_list_insertbefore>` (
	    variant item,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode :ref:`insertAfter<doxid-function_std_list_insertafter>` (
	    variant item,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

	void :ref:`moveToHead<doxid-function_std_list_movetohead>` (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)
	void :ref:`moveToTail<doxid-function_std_list_movetotail>` (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)

	void :ref:`moveBefore<doxid-function_std_list_movebefore>` (
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

	void :ref:`moveAfter<doxid-function_std_list_moveafter>` (
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

	variant :ref:`removeHead<doxid-function_std_list_removehead>` ()
	variant :ref:`removeTail<doxid-function_std_list_removetail>` ()
	variant :ref:`remove<doxid-function_std_list_remove>` (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)

.. _details-doxid-type_std_list:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides a doubly linked list container for ``variant``
values.

A typical sequence of steps when working with a doubly linked list usually
looks like this:

* Add items using *insert* methods: ``insertHead``, ``insertTail``,
  ``insertBefore``, ``insertAfter``;
* Remove items using *remove* methods: ``removeHead``, ``removeTail``,
  ``removeBefore``, ``removeAfter``, ``remove``;
* Iterate over items by starting with ``m_head`` or ``m_tail`` and then move
  to the next element by inspecting `std.ListEntry.m_next` or
  `std.ListEntry.m_prev`.

.. rubric:: Sample code:

.. ref-code-block::

    std.List list;

    // add items...

    int a [] = { 10, 20, 30, 40, 50, }

    for (size_t i = 0; i < countof (a); i++)
        list.insertTail (a [i]);

    // iterate over list...

    std.ListEntry* e = list.m_head;
    for (; e; e = e.m_next)
    {
        // access e.m_data...
    }



.. rubric:: See also:

`std.ListEntry`

Fields
------

.. _doxid-struct_member_std_list_iface_m_head:
.. _cid-std.list.m_head:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* readonly m_head

Holds a pointer to the *list head* (the first element of the list) or
``null`` if the list is empty.

.. _doxid-struct_member_std_list_iface_m_tail:
.. _cid-std.list.m_tail:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* readonly m_tail

Holds a pointer to the *list tail* (the last element of the list) or
``null`` if the list is empty.

.. _doxid-struct_member_std_list_iface_m_count:
.. _cid-std.list.m_count:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` readonly m_count

Holds number of elements on the list.

Methods
-------

.. _doxid-function_std_list_clear:
.. _cid-std.list.clear:
.. ref-code-block:: jancy
	:class: title-code-block

	void clear ()

Removes all elements from the lists.

.. _doxid-function_std_list_takeover:
.. _cid-std.list.takeover:
.. ref-code-block:: jancy
	:class: title-code-block

	void takeOver (:ref:`std.List<doxid-type_std_list>`* list)

Moves all the elements from the source list ``list`` to this list.

After the take-over, ``list`` will be empty and this list will contain
the same elements as ``list`` originally did.

This operation is performed in constant time no matter the size of the
source list -- so it's always more efficient than clearing the list
first and then adding all the items from the source list in a loop.

.. _doxid-function_std_list_add:
.. _cid-std.list.add:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode add (variant data)

Adds item ``data``  to the list.

Returns a pointer to the new `std.ListEntry`.

Equivalent to ``insertTail``.

.. _doxid-function_std_list_inserthead:
.. _cid-std.list.inserthead:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode insertHead (variant data)

Inserts item ``data`` to the head of the list.

Returns a pointer to the new `std.ListEntry`.

.. _doxid-function_std_list_inserttail:
.. _cid-std.list.inserttail:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode insertTail (variant data)

Inserts item ``data`` to the tail of the list.

Returns a pointer to the new `std.ListEntry`.

.. _doxid-function_std_list_insertbefore:
.. _cid-std.list.insertbefore:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode insertBefore (
	    variant item,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

Inserts item ``data`` before the item entry pointed to by ``entry``
argument.

If ``entry == null`` then this method is equivalent to ``insertTail``.

Returns a pointer to the new `std.ListEntry`.

.. _doxid-function_std_list_insertafter:
.. _cid-std.list.insertafter:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* errorcode insertAfter (
	    variant item,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

Inserts item ``data`` after the item entry pointed to by ``entry``
argument.

If ``entry == null`` then this method is equivalent to ``insertHead``.

Returns a pointer to the new `std.ListEntry`.

.. _doxid-function_std_list_movetohead:
.. _cid-std.list.movetohead:
.. ref-code-block:: jancy
	:class: title-code-block

	void moveToHead (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)

Moves item entry pointed to by ``entry`` to the head of the list.

After this call ``m_head`` will be pointing to ``entry``.

.. _doxid-function_std_list_movetotail:
.. _cid-std.list.movetotail:
.. ref-code-block:: jancy
	:class: title-code-block

	void moveToTail (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)

Moves item entry pointed to by  ``entry`` to the tail of the list.

After this call ``m_tail`` will be pointing to ``entry``.

.. _doxid-function_std_list_movebefore:
.. _cid-std.list.movebefore:
.. ref-code-block:: jancy
	:class: title-code-block

	void moveBefore (
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

Moves item entry pointed to by ``entry`` before item entry pointed to
by  ``before``.

If ``entry == null`` then this method is equivalent to ``moveToTail``.

.. _doxid-function_std_list_moveafter:
.. _cid-std.list.moveafter:
.. ref-code-block:: jancy
	:class: title-code-block

	void moveAfter (
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry,
	    :ref:`std.ListEntry<doxid-type_std_listentry>` cmut* before
	    )

Moves item entry pointed to by  ``entry`` after item entry pointed to by
``after``.

If ``after == null`` then this method is equivalent to ``moveToHead``.

.. _doxid-function_std_list_removehead:
.. _cid-std.list.removehead:
.. ref-code-block:: jancy
	:class: title-code-block

	variant removeHead ()

Removes head item entry.

Returns the value of `std.ListEntry.m_data` field of the removed list
head.

If list is empty at the moment of removal does nothing and returns
``null``.

.. _doxid-function_std_list_removetail:
.. _cid-std.list.removetail:
.. ref-code-block:: jancy
	:class: title-code-block

	variant removeTail ()

Removes tail item entry.

Returns the value of `std.ListEntry.m_data` field of the removed list
tail.

If list is empty at the moment of removal does nothing and returns
``null``.

.. _doxid-function_std_list_remove:
.. _cid-std.list.remove:
.. ref-code-block:: jancy
	:class: title-code-block

	variant remove (:ref:`std.ListEntry<doxid-type_std_listentry>` cmut* entry)

Removes item entry pointed to by ``entry``.

Returns the value of ``entry.m_data`` field.

