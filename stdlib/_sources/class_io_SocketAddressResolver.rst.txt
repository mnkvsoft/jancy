.. include:: def.rst
.. index:: pair: class; io.SocketAddressResolver
.. _doxid-type_io_socketaddressresolver:
.. _cid-io.socketaddressresolver:

class io.SocketAddressResolver
==============================

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "io_base.jncx"
	import "io_SocketAddressResolver.jncx"


Overview
~~~~~~~~

This class provides an asynchrounous interface for resolving host
names into socket addresses. :ref:`More...<details-doxid-type_io_socketaddressresolver>`

.. _doxid-typedef_io_socketaddressresolver_completionfunc:
.. _cid-io.socketaddressresolver.completionfunc:
.. _doxid-function_io_socketaddressresolver_resolve_2:
.. _cid-io.socketaddressresolver.resolve:
.. ref-code-block:: jancy
	:class: overview-code-block

	// typedefs

	typedef void CompletionFunc (
	    :ref:`io.SocketAddress<doxid-type_io_socketaddress>` const* addressTable,
	    :ref:`size_t<doxid-typedef_size_t>` addressCount,
	    :ref:`std.Error<doxid-type_std_error>` const* error
	    )

	// methods

	:ref:`uintptr_t<doxid-typedef_uintptr_t>` errorcode :ref:`resolve<doxid-function_io_socketaddressresolver_resolve>` (
	    char const* name,
	    :ref:`io.AddressFamily<doxid-type_io_addressfamily>` family,
	    :ref:`io.SocketAddressResolver.CompletionFunc<doxid-typedef_io_socketaddressresolver_completionfunc>`* completionFunc
	    )

	:ref:`uintptr_t<doxid-typedef_uintptr_t>` errorcode resolve (
	    char const* name,
	    :ref:`io.SocketAddressResolver.CompletionFunc<doxid-typedef_io_socketaddressresolver_completionfunc>`* completionFunc
	    )

	bool :ref:`cancel<doxid-function_io_socketaddressresolver_cancel>` (:ref:`uintptr_t<doxid-typedef_uintptr_t>` id)
	void :ref:`cancelAll<doxid-function_io_socketaddressresolver_cancelall>` ()

	// aliases

	alias :ref:`dispose<doxid-alias_io_socketaddressresolver_dispose>` = cancelAll

.. _details-doxid-type_io_socketaddressresolver:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides an asynchrounous interface for resolving host
names into socket addresses.

In the most general case conversion of a host name such as ``tibbo.com``
into an ``IP`` requires sending and receiving network packets and,
therefore, may take substantial time. Doing this operation synchronoulsy,
while acceptable in many cases, is not really optimal for interactive GUI
applications where we do not want to have moments of *non-responsiveness*.
For such cases using ``io.SocketAddressResolver`` may be a better approach.

A typical sequence of steps when resolving a host address looks like this:

* Assign your event handler using ``m_onResolverEvent`` (you would probably
  also want to *schedule* your event handler to be run in particular
  environment, e.g. in specific thread)
* Start one or more resolve requests with ``resolve`` method;
* Wait until ``ResolveCompleted`` or ``ResolveError`` event;
* Cancel all pending resolve requests with ``cancelAll`` method.

.. rubric:: Sample code:

.. ref-code-block::

    class MyDialog
    {
        // ...

        io.SocketAddressResolver m_resolver;
        uint_t m_syncId;

        resolve (char const* hostName);

        onResolverEvent (
            uint_t syncId,
            `io.SocketAddress` const* addressTable,
            size_t addressCount,
            `std.Error` const* error
            );
    }

    MyDialog.resolve (char const* hostName)
    {
        bool result = try m_resolver.resolve (
            hostName,
            onResolveCompleted ~(++m_syncId) @ g_mainThreadScheduler
            );

        if (!result)
        {
            // handle the error...
        }
    }

    MyDialog.onResolveCompleted (
        uint_t syncId,
        `io.SocketAddress` const* addressTable,
        size_t addressCount,
        `std.Error` const* error
        )
    {
        if (syncId != m_syncId) // late event
            return;

        if (error)
        {
            // handle error
        }
        else
        {
            // hostname successfully resolved; result is at: addressTable
        }
    }



.. rubric:: See also:

`io.SocketAddress`

Methods
-------

.. _doxid-function_io_socketaddressresolver_resolve:
.. _cid-io.socketaddressresolver.resolve-2:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`uintptr_t<doxid-typedef_uintptr_t>` errorcode resolve (
	    char const* name,
	    :ref:`io.AddressFamily<doxid-type_io_addressfamily>` family,
	    :ref:`io.SocketAddressResolver.CompletionFunc<doxid-typedef_io_socketaddressresolver_completionfunc>`* completionFunc
	    )

Starts a new resolve request, bumps ``m_syncId`` and assigns it to the
new request.

Returns ``true`` on success. If a resolve request could not be started,
IO error supplied by operating system is set and then the function
returns ``false`` [#f1]_.

.. _doxid-function_io_socketaddressresolver_cancel:
.. _cid-io.socketaddressresolver.cancel:
.. ref-code-block:: jancy
	:class: title-code-block

	bool cancel (:ref:`uintptr_t<doxid-typedef_uintptr_t>` id)

Cancels an on-going resolve requests identified by ``syncId``, does
nothing is ``syncId`` request is not found.

.. _doxid-function_io_socketaddressresolver_cancelall:
.. _cid-io.socketaddressresolver.cancelall:
.. ref-code-block:: jancy
	:class: title-code-block

	void cancelAll ()

Cancels all on-going resolve requests.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``cancelAll`` [#f2]_.

Aliases
-------

.. _doxid-alias_io_socketaddressresolver_dispose:
.. _cid-io.socketaddressresolver.dispose:
.. ref-code-block:: jancy
	:class: title-code-block

	alias dispose = cancelAll

Effectively makes ``io.SocketAddressResolver`` a *disposable* class
[#f2]_.

---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

.. [#f3]

	|footnote-sync-id|

