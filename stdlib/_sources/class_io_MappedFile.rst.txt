.. include:: def.rst
.. index:: pair: class; io.MappedFile
.. _doxid-type_io_mappedfile:
.. _cid-io.mappedfile:

class io.MappedFile
===================

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "io_base.jncx"
	import "io_MappedFile.jnc"


Overview
~~~~~~~~

This class provides high level mapped access to the contents of
regular disk files. :ref:`More...<details-doxid-type_io_mappedfile>`

.. _doxid-function_io_mappedfile_setsize:
.. _cid-io.mappedfile.setsize:
.. _doxid-function_io_mappedfile_unmapallviews:
.. _cid-io.mappedfile.unmapallviews:
.. ref-code-block:: jancy
	:class: overview-code-block

	// fields

	bool readonly :ref:`m_isOpen<doxid-struct_member_io_mappedfile_iface_m_isopen>`

	// properties

	:ref:`size_t<doxid-typedef_size_t>` autoget property :ref:`m_dynamicViewLimit<doxid-property_io_mappedfile_m_dynamicviewlimit>` 
	:ref:`uint64_t<doxid-typedef_uint64_t>` const property :ref:`m_size<doxid-property_io_mappedfile_m_size>` 

	// methods

	bool errorcode :ref:`open<doxid-function_io_mappedfile_open>` (
	    char const* name,
	    :ref:`io.FileOpenFlags<doxid-type_io_fileopenflags>` flags = 0
	    )

	void :ref:`close<doxid-function_io_mappedfile_close>` ()
	bool errorcode setSize (:ref:`uint64_t<doxid-typedef_uint64_t>` size)

	void* errorcode :ref:`view<doxid-function_io_mappedfile_view>` (
	    :ref:`uint64_t<doxid-typedef_uint64_t>` offset,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    bool isPermanent = false
	    )

	void unmapAllViews ()

	// aliases

	alias :ref:`dispose<doxid-alias_io_mappedfile_dispose>` = close

.. _details-doxid-type_io_mappedfile:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides high level mapped access to the contents of
regular disk files.

From the programmer's point of view, ``io.MappedFile`` exposes the most
natural interface imaginable. You just tell: I want to access a region of
the file at *this* offset, and of *this* length. And you get a pointer to
this region (or ``null`` if this could not be done). That's it! Actual
mapping operations, aligning offsets and maintaining a database of
previously mapped views is happening behind the stage.

Views provided by ``io.MappedFile`` can be *permanent* or *dynamic*.
A pointer to a permanent view, as the name suggests, remains valid *all the
time* while the file is open. Pointers to *dynamic* views, on the other
hand, do expire. You can only access ``m_dynamicViewLimit`` views at the
same time. Expiration queue is organized in FIFO (first-in-first-out)
manner, but it is readjusted each time user requests access to the region
with ``view`` method (last accessed view is moved to the tail of the
expiration queue).

.. rubric:: Sample code:

.. ref-code-block::

    struct Hdr
    {
        uint32_t m_signature;
        uint32_t m_version;
        uint32_t m_sectionCount;
        // ...
    }

    struct SectionDesc
    {
        uint64_t m_offset;
        uint64_t m_size;
    }

    foo (char const* fileName)
    {
        disposable io.MappedFile file;
        file.open (fileName, `io.FileOpenFlags.ReadOnly`);

        // permanent view of header
        Hdr const* hdr = file.view (0, sizeof (Hdr), true);

        size_t offset = sizeof (Hdr);
        for (
            size_t i = 0;
            i < hdr.m_sectionCount;
            i++, offset += sizeof (SectionDesc)
            )
        {
            SectionDesc const* sectionDesc = file.view (
                offset,
                sizeof (SectionDesc)
                );

            void const* section = file.view (
                sectionDesc.m_offset,
                sectionDesc.m_size
                );
            // ...
        }

    catch:
        // handle error
    }



.. rubric:: See also:

`io.File`

Fields
------

.. _doxid-struct_member_io_mappedfile_iface_m_isopen:
.. _cid-io.mappedfile.m_isopen:
.. ref-code-block:: jancy
	:class: title-code-block

	bool readonly m_isOpen

Holds the open status for the mapped file, i.e. ``true`` if opened;
``false`` otherwise.

Properties
----------

.. _doxid-property_io_mappedfile_m_dynamicviewlimit:
.. _cid-io.mappedfile.m_dynamicviewlimit:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` autoget property m_dynamicViewLimit 

Holds the maximum amount of *dynamic* views maintained in
``io.MappedFile`` internal database. Once dynamic view limit is
exhausted, the dynamic view which has not been accessed *the longest*,
is unmapped and released.

The required amount of dynamic view limit, of course, depends on the
particular algorithm used to access regions of the file -- i.e. how many
regions you need to access simultaneously.

.. _doxid-property_io_mappedfile_m_size:
.. _cid-io.mappedfile.m_size:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`uint64_t<doxid-typedef_uint64_t>` const property m_size 

This property is used for getting and setting file size.

Reading from this property returns current size of the file; writing to
it sets new size. If setting new size fails, IO error supplied by
operating system is set; then dynamic exception is thrown.

Methods
-------

.. _doxid-function_io_mappedfile_open:
.. _cid-io.mappedfile.open:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (
	    char const* name,
	    :ref:`io.FileOpenFlags<doxid-type_io_fileopenflags>` flags = 0
	    )

Opens or creates a file, but no mappings are created.

The function accepts two arguments. The first one, ``name`` specifies
the name of the file/device. The second one, ``flags``, can be used to
specify open options. Check `io.FileOpenFlags` for the complete list of
options.

If file could not be opened, IO error supplied by operating system is
set and then the function returns ``false`` [#f1]_.

.. _doxid-function_io_mappedfile_close:
.. _cid-io.mappedfile.close:
.. ref-code-block:: jancy
	:class: title-code-block

	void close ()

Closes a previously opened file, does nothing if the file is not opened.
This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``close`` [#f2]_.

.. _doxid-function_io_mappedfile_view:
.. _cid-io.mappedfile.view:
.. ref-code-block:: jancy
	:class: title-code-block

	void* errorcode view (
	    :ref:`uint64_t<doxid-typedef_uint64_t>` offset,
	    :ref:`size_t<doxid-typedef_size_t>` size,
	    bool isPermanent = false
	    )

Provides access to the region of the file at ``offset`` and ``size``
bytes long. The final, third argument is used to specify whether the
requested view should be *permanent* or *dynamic*.

Returns a pointer to the requested region, or ``null`` if mapping
operation failed [#f1]_.

Aliases
-------

.. _doxid-alias_io_mappedfile_dispose:
.. _cid-io.mappedfile.dispose:
.. ref-code-block:: jancy
	:class: title-code-block

	alias dispose = close

Effectively makes ``io.MappedFile`` a *disposable* class [#f2]_.

---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

