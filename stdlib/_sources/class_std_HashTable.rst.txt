.. include:: def.rst
.. index:: pair: class; std.HashTable
.. _doxid-type_std_hashtable:
.. _cid-std.hashtable:

class std.HashTable
===================

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "std_HashTable.jnc"


Overview
~~~~~~~~

This class provides a hash-table-based mapping from ``variant``-s to
``variant``-s. :ref:`More...<details-doxid-type_std_hashtable>`

.. _doxid-struct_member_std_hashtable_iface_m_head:
.. _cid-std.hashtable.m_head:
.. _doxid-struct_member_std_hashtable_iface_m_tail:
.. _cid-std.hashtable.m_tail:
.. _doxid-struct_member_std_hashtable_iface_m_count:
.. _cid-std.hashtable.m_count:
.. _doxid-function_std_hashtable_construct:
.. _cid-std.hashtable.construct:
.. _doxid-function_std_hashtable_visit:
.. _cid-std.hashtable.visit:
.. _doxid-function_std_hashtable_remove:
.. _cid-std.hashtable.remove:
.. ref-code-block:: jancy
	:class: overview-code-block

	class HashTable

	    // direct descendants

	    class :ref:`std.StringHashTable<doxid-type_std_stringhashtable>` 
	    class :ref:`std.StringHashTableIgnoreCase<doxid-type_std_stringhashtableignorecase>` 

	// fields

	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* readonly m_head
	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* readonly m_tail
	:ref:`size_t<doxid-typedef_size_t>` readonly m_count

	// properties

	bool const property :ref:`m_isEmpty<doxid-property_std_hashtable_m_isempty>` 

	// construction

	void construct (
	    :ref:`std.HashFunc<doxid-typedef_std_hashfunc>` thin* hashFunc = null,
	    :ref:`std.IsEqualFunc<doxid-typedef_std_isequalfunc>` thin* isEqualFunc = null
	    )

	// methods

	void :ref:`clear<doxid-function_std_hashtable_clear>` ()
	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* errorcode visit (variant key)
	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* :ref:`find<doxid-function_std_hashtable_find>` (variant key) const

	variant :ref:`findValue<doxid-function_std_hashtable_findvalue>` (
	    variant key,
	    variant undefinedValue = null
	    ) const

	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* errorcode :ref:`add<doxid-function_std_hashtable_add>` (
	    variant key,
	    variant value
	    )

	void remove (:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* entry)
	bool :ref:`removeKey<doxid-function_std_hashtable_removekey>` (variant key)

.. _details-doxid-type_std_hashtable:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides a hash-table-based mapping from ``variant``-s to
``variant``-s.

``std.HashTable`` stores ``(key; value)`` pairs and provides fast lookup of
the ``value`` associated with a ``key``.

A typical sequence of steps when working with a hash table usually looks
like this:

* Add ``(key; value)`` pairs using ``add`` method (or by accessing the
  *indexer* property);
* Remove ``(key; value)`` pairs using ``remove`` or ``removeKey`` methods;
* Find ``value`` associated with a ``key`` using ``find``, ``findValue``
  method (or by accessing the *indexer* property).

.. rubric:: Sample code:

.. ref-code-block::

    enum State
    {
        Idle,
        Running,
        Stopping,
        _Count
    }

    std.HashTable hashTable;

    hashTable [State.Idle] = "idle";
    hashTable [State.Running] = "running";
    hashTable [State.Stopping] = "stopping";

    State state = (State) (rand () % State._Count);

    printf ($"state: $(hashTable [state])\n");

Properties
----------

.. _doxid-property_std_hashtable_m_isempty:
.. _cid-std.hashtable.m_isempty:
.. ref-code-block:: jancy
	:class: title-code-block

	bool const property m_isEmpty 

Returns ``true`` if hash table is empty; ``false`` otherwise.

Methods
-------

.. _doxid-function_std_hashtable_clear:
.. _cid-std.hashtable.clear:
.. ref-code-block:: jancy
	:class: title-code-block

	void clear ()

Remove all entries from the hash table.

.. _doxid-function_std_hashtable_find:
.. _cid-std.hashtable.find:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* find (variant key) const

Looks up a value associated with the key ``key``.

If the value is found, it is copied to the buffer pointed to by
``value``; then ``find`` method returns ``true``.

Returns ``false`` if key ``key`` is not found.

.. _doxid-function_std_hashtable_findvalue:
.. _cid-std.hashtable.findvalue:
.. ref-code-block:: jancy
	:class: title-code-block

	variant findValue (
	    variant key,
	    variant undefinedValue = null
	    ) const

Looks up a value associated with the key ``key``.

Returns the found value or ``undefinedValue`` if the value is not found.

``undefinedValue`` must be chosen distinct from all the possible values
in the hash table so it can be used as a *key-not-found* token.

.. _doxid-function_std_hashtable_add:
.. _cid-std.hashtable.add:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`std.MapEntry<doxid-type_std_mapentry>` cmut* errorcode add (
	    variant key,
	    variant value
	    )

Adds a new ``(key; value)`` pair into the hash table.

If ``key`` is already in the hash, ``insert`` re-writes the value of
existing association with the new value specified by the ``value``
argument.

.. _doxid-function_std_hashtable_removekey:
.. _cid-std.hashtable.removekey:
.. ref-code-block:: jancy
	:class: title-code-block

	bool removeKey (variant key)

Finds and deletes ``key`` from the hash table.

Returns ``true`` if ``key`` was found and ``(key; value)`` pair
successfully deleted.

Returns ``false`` if ``key`` was not found.

