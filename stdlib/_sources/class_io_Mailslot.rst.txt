.. include:: def.rst
.. index:: pair: class; io.Mailslot
.. _doxid-type_io_mailslot:
.. _cid-io.mailslot:

class io.Mailslot
=================

.. toctree::
	:hidden:

.. code-block:: jancy
	:class: overview-code-block

	import "io_base.jncx"
	import "io_Mailslot.jnc"


Overview
~~~~~~~~

This class provides high-level asynchronous streaming interface for
the *server* side of Windows mailslots which are used, for example, in SMB
(Server Message Blocks) protocol and Windows Computer Browser service. :ref:`More...<details-doxid-type_io_mailslot>`

.. _doxid-struct_member_io_mailslot_iface_m_activeevents:
.. _cid-io.mailslot.m_activeevents:
.. _doxid-struct_member_io_mailslot_iface_m_ioerror:
.. _cid-io.mailslot.m_ioerror:
.. _doxid-property_io_mailslot_m_readparallelism:
.. _cid-io.mailslot.m_readparallelism:
.. _doxid-property_io_mailslot_m_readblocksize:
.. _cid-io.mailslot.m_readblocksize:
.. _doxid-property_io_mailslot_m_readbuffersize:
.. _cid-io.mailslot.m_readbuffersize:
.. _doxid-property_io_mailslot_m_options:
.. _cid-io.mailslot.m_options:
.. _doxid-function_io_mailslot_wait:
.. _cid-io.mailslot.wait:
.. _doxid-function_io_mailslot_cancelwait:
.. _cid-io.mailslot.cancelwait:
.. _doxid-function_io_mailslot_blockingwait:
.. _cid-io.mailslot.blockingwait:
.. ref-code-block:: jancy
	:class: overview-code-block

	// fields

	:ref:`io.MailslotEvents<doxid-type_io_mailslotevents>` readonly volatile m_activeEvents
	:ref:`std.Error<doxid-type_std_error>` const* readonly volatile m_ioError
	bool readonly :ref:`m_isOpen<doxid-struct_member_io_mailslot_iface_m_isopen>`

	// properties

	:ref:`uint_t<doxid-typedef_uint_t>` autoget property m_readParallelism 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBlockSize 
	:ref:`size_t<doxid-typedef_size_t>` autoget property m_readBufferSize 
	:ref:`io.MailslotOptions<doxid-type_io_mailslotoptions>` autoget property m_options 

	// methods

	bool errorcode :ref:`open<doxid-function_io_mailslot_open>` (char const* name)
	void :ref:`close<doxid-function_io_mailslot_close>` ()

	:ref:`size_t<doxid-typedef_size_t>` errorcode :ref:`read<doxid-function_io_mailslot_read>` (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

	long errorcode wait (
	    :ref:`io.MailslotEvents<doxid-type_io_mailslotevents>` eventMask,
	    void function* handler (io.MailslotEvents triggeredEvents)
	    )

	bool errorcode cancelWait (long handle)

	:ref:`io.MailslotEvents<doxid-type_io_mailslotevents>` errorcode blockingWait (
	    :ref:`io.MailslotEvents<doxid-type_io_mailslotevents>` eventMask,
	    :ref:`uint_t<doxid-typedef_uint_t>` timeout
	    )

	// aliases

	alias :ref:`dispose<doxid-alias_io_mailslot_dispose>` = close

.. _details-doxid-type_io_mailslot:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides high-level asynchronous streaming interface for
the *server* side of Windows mailslots which are used, for example, in SMB
(Server Message Blocks) protocol and Windows Computer Browser service.

For working from the *client* side of a mailslot, please use `io.File` or
`io.FileStream`.

A typical sequence of steps when working with a mailslot looks something
like this:

* Open a mailslot with ``open`` method;
* Assign IO event handler with ``wait`` method. You  would probably also
  want to *schedule* your event handler to be run in particular
  environment (e.g., in a specific thread) and partially apply some
  syncrhonization ID to discard late events;
* When `io.MailslotEvents.IncomingData` event is fired, read from the
  mailslot using ``read`` method;
* Close the mailslot when no longer needed with ``close`` method.

.. rubric:: Sample code:

.. ref-code-block::

    class MyDialog
    {
        // ...

        io.Mailslot m_mailslot;
        uint_t m_syncId;

        open (char const* fileName);
        close ();
        waitMailslotEvents ();

        onMailslotEvent (
            uint_t syncId,
            `io.MailslotEvents` triggeredEvents
            );
    }

    MyDialog.open (char const* fileName)
    {
        bool result = try m_mailslot.open (fileName);
        if (!result)
        {
            char const* errorString = std.getLastError ().m_description;
            // ...
        }

        waitMailslotEvents ();
    }

    MyDialog.close ()
    {
        m_mailslot.close ();
        m_syncId++; // events past this point will be discarded as 'late'
    }

    MyDialog.waitMailslotEvent ()
    {
        `io.MailslotEvents` eventMask =
            `io.MailslotEvents.IoError` |
            `io.MailslotEvents.IncomingData`;

        m_mailslot.wait (eventMask, onMailslotEvent ~(++m_syncId) @
            g_mainThreadScheduler);
    }

    MyDialog.onMailslotEvent (
        uint_t syncId,
        `io.FileStreamEvents` triggeredEvents
        )
    {
        if (syncId != m_syncId) // late event
            return;

        if (triggeredEvents & `io.MailslotEvents.IoError`)
        {
            char const* errorString = m_mailslot.m_ioError.m_description;
            // ...
        }

        if (triggeredEvents & `io.MailslotEvents.IncomingData`)
        {
            char buffer [256];
            size_t size = m_mailslot.read (buffer, sizeof (buffer));
            // ...
        }

        waitMailslotEvents (); // restart wait
    }



.. rubric:: See also:

`io.MailslotEvents`, `io.File`, `io.FileStream`

Fields
------

.. _doxid-struct_member_io_mailslot_iface_m_isopen:
.. _cid-io.mailslot.m_isopen:
.. ref-code-block:: jancy
	:class: title-code-block

	bool readonly m_isOpen

Holds the open status for the mailslot, i.e. ``true`` if opened;
``false`` otherwise.

Methods
-------

.. _doxid-function_io_mailslot_open:
.. _cid-io.mailslot.open:
.. ref-code-block:: jancy
	:class: title-code-block

	bool errorcode open (char const* name)

Opens or creates a mailslot.

The function accepts a single argument, ``name``, which is used to
specify the name of the mailslot.

Returns ``true`` on success. If the mailslot could not be opened, IO
error supplied by operating system is set and then the function returns
``false``  [#f1]_.

.. _doxid-function_io_mailslot_close:
.. _cid-io.mailslot.close:
.. ref-code-block:: jancy
	:class: title-code-block

	void close ()

Closes a previously opened mailslot, does nothing if the mailslot is not
opened. This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``close`` [#f2]_.

.. _doxid-function_io_mailslot_read:
.. _cid-io.mailslot.read:
.. ref-code-block:: jancy
	:class: title-code-block

	:ref:`size_t<doxid-typedef_size_t>` errorcode read (
	    void* p,
	    :ref:`size_t<doxid-typedef_size_t>` size
	    )

Attempts to read up to ``size`` bytes from the mailslot into the buffer
pointed to by ``p``.

Returns the actual amount of bytes read or ``-1`` if error occurs [#f1]_.

Normally you would call this function from within your event handler for
``IncomingData`` event. If this function is called when there is no
incoming data, it blocks until either the data arrives, or the mailslot
is closed.

Aliases
-------

.. _doxid-alias_io_mailslot_dispose:
.. _cid-io.mailslot.dispose:
.. ref-code-block:: jancy
	:class: title-code-block

	alias dispose = close

Effectively makes ``io.Mailslot`` a *disposable* class [#f2]_.

---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

.. [#f3]

	|footnote-sync-id|

